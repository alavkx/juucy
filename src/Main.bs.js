// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");

function fromString(str) {
  switch (str) {
    case "=>" :
        return /* Arrow */3;
    case "initial" :
        return /* Initial */4;
    case "state" :
        return /* State */2;
    case "{" :
        return /* OpenCurly */0;
    case "!" :
    case "\"" :
    case "#" :
    case "$" :
    case "%" :
    case "&" :
    case "'" :
    case "(" :
    case ")" :
    case "*" :
    case "+" :
    case "," :
    case "-" :
    case "." :
    case "/" :
    case ":" :
    case ";" :
    case "<" :
    case "?" :
    case "@" :
    case "[" :
    case "\\" :
    case "]" :
    case "^" :
    case "|" :
        return {
                TAG: /* Unexpected */1,
                _0: str
              };
    case "}" :
        return /* CloseCurly */1;
    default:
      return {
              TAG: /* Identifier */0,
              _0: str
            };
  }
}

function toString(token) {
  if (typeof token !== "number") {
    return token._0;
  }
  switch (token) {
    case /* OpenCurly */0 :
        return "{";
    case /* CloseCurly */1 :
        return "}";
    case /* State */2 :
        return "state";
    case /* Arrow */3 :
        return "arrow";
    case /* Initial */4 :
        return "initial";
    
  }
}

function length(token) {
  return toString(token).length;
}

var Token = {
  fromString: fromString,
  toString: toString,
  length: length
};

function make(column, line, value) {
  return {
          value: value,
          line: line,
          column: column
        };
}

var PositionToken = {
  make: make
};

function make$1(source) {
  return {
          source: source,
          tokens: [],
          index: 0,
          wordOffset: 0,
          line: 1,
          column: 1
        };
}

function appendToken(cursor, token) {
  return Belt_Array.concat(cursor.tokens, [{
                value: token,
                line: cursor.line - toString(token).length | 0,
                column: cursor.column
              }]);
}

function toWord(cursor) {
  return cursor.source.substr(cursor.index, cursor.wordOffset);
}

function appendWord(cursor) {
  var word = toWord(cursor);
  if (word === "") {
    return cursor.tokens;
  } else {
    return appendToken(cursor, {
                TAG: /* Identifier */0,
                _0: word
              });
  }
}

function commitToken(cursor, token) {
  return {
          source: cursor.source,
          tokens: appendToken(cursor, token),
          index: cursor.index + cursor.wordOffset | 0,
          wordOffset: 0,
          line: cursor.line,
          column: cursor.column
        };
}

function nextLine(cursor) {
  return {
          source: cursor.source,
          tokens: appendWord(cursor),
          index: cursor.index + 1 | 0,
          wordOffset: 0,
          line: cursor.line + 1 | 0,
          column: 1
        };
}

function advance(cursor) {
  return {
          source: cursor.source,
          tokens: cursor.tokens,
          index: cursor.index + 1 | 0,
          wordOffset: 0,
          line: cursor.line,
          column: cursor.column + 1 | 0
        };
}

function lookAhead(cursor) {
  return {
          source: cursor.source,
          tokens: cursor.tokens,
          index: cursor.index + 1 | 0,
          wordOffset: cursor.wordOffset + 1 | 0,
          line: cursor.line,
          column: cursor.column + 1 | 0
        };
}

var Cursor = {
  make: make$1,
  appendToken: appendToken,
  toWord: toWord,
  appendWord: appendWord,
  commitToken: commitToken,
  nextLine: nextLine,
  advance: advance,
  lookAhead: lookAhead
};

function scan(_cursor) {
  while(true) {
    var cursor = _cursor;
    var x = toWord(cursor);
    switch (x) {
      case "" :
          return cursor.tokens;
      case "\n" :
      case "\r" :
          _cursor = nextLine(cursor);
          continue ;
      case "\t" :
      case " " :
          _cursor = advance(cursor);
          continue ;
      default:
        var token = fromString(x);
        if (typeof token === "number") {
          _cursor = commitToken(cursor, token);
          continue ;
        }
        if (token.TAG === /* Identifier */0) {
          _cursor = lookAhead(cursor);
          continue ;
        }
        _cursor = commitToken(cursor, token);
        continue ;
    }
  };
}

function report(line, where, message) {
  console.log("[line: " + line + "] Error " + where + ": " + message);
  
}

var input = "\n  state enabled {\n    toggle => disabled\n  }\n\n  initial state disabled {\n    toggle => enabled\n  }\n";

var output = scan(make$1(input));

console.log(Belt_Array.map(output, (function (pt) {
            return {
                    value: toString(pt.value),
                    line: pt.line,
                    column: pt.column
                  };
          })));

exports.Token = Token;
exports.PositionToken = PositionToken;
exports.Cursor = Cursor;
exports.scan = scan;
exports.report = report;
exports.input = input;
exports.output = output;
/* output Not a pure module */
